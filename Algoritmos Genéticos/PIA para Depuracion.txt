#Para manejar mejor las cadenas de datos
library(stringr)


Tamaño_Poblacion <- 5
Tamaño_Individuo <- 2

#Esta función recibe la longitud de los datos que va a crear
Generar_IndividuosAleatorios <- function(length) {
  
  #Crea un arreglo vacío donde va a llenarla aleatoriamente de 0s y 1s.
  #Y va a remplazar lo que había originalmente en ese string que creó (Que era "" osea nada)
  individuo <- paste(sample(c(0, 1), length, replace = TRUE), collapse = "")

  #Si recibe la orden de hacer individuos con una longitud mayor a 8
  if (nchar(individuo) > 8) {
    #De cada individuo creado sólo guardará los primeros 8 caracteres
    individuo <- substr(individuo, 1, 8)
    cat("Así que tomaré los primeros 8 dígitos de cada individuo.\n")

  #Si recibe la orden de hacer individuos con una longitud menor a 8  
  } else if (nchar(individuo) < 8) {
    #Los va a hacer, pero les va a poner 0s a la izquierda para rellenar.
    individuo <- str_pad(individuo, width = 8, side = "left", pad = "0")
  }
  return(individuo)
}



Generar_Poblacion <- function(Tamaño_Poblacion, Tamaño_Individuo, Poblacion_Predefinida = NULL) {
  
  #Si el espacio para "Población_Predefinida" no está vacío. Significa que sí le pasamos
  #Una población predefinida. En ese caso...
  if (!is.null(Poblacion_Predefinida)) {
    Poblacion <- Poblacion_Predefinida  #Que use esa.
  } 
  #Pero si no... (Que lo más probable es que no)
  else {
    CuentaRepeticion <- 0   #Cuenta de cuántas veces está intentando generar... Nos ayudará a detectar errores
    Poblacion <- character(Tamaño_Poblacion)  #Crea un arreglo llamado "Población" del tamaño requerido
    Individuos_Generados <- character()       #Crea un arreglo que inicia bacío donde vamos a ir guardando los generados
    max_intentos <- 10    # Número máximo de intentos para evitar repeticiones
                          # Si tras esa cantidad de intentos no logra generar números distintos
                          # Que deje de intentarlo. Probablemente no se puede.

    for (i in 1:Tamaño_Poblacion) {
      intentos <- 0
      repeat {

        #Genera un nuevo individyo llamando a esa función de generar individuos.
        nuevo_individuo <- Generar_IndividuosAleatorios(Tamaño_Individuo)

        #Si ese individuo NO está en nustra lsita de individuos.
        if (!(nuevo_individuo %in% Individuos_Generados)) {
          #Lo mete a la lista.
          Poblacion[i] <- nuevo_individuo
          Individuos_Generados <- c(Individuos_Generados, nuevo_individuo)
          break
        } 
        
        #Pero si SÍ está en la lsita de individuos
        else {
          intentos <- intentos + 1    #Que cuente que lo está intentando de nuevo.
          if (intentos >= max_intentos) {
            #cat("No hay más combinaciones posibles sin repetir los números. Permitida la repetición.\n")
            Poblacion[i] <- nuevo_individuo
            break
          }
        }
      }
    }
  }
  return(Poblacion)
}

Poblacion_Inicial <- Generar_Poblacion(Tamaño_Poblacion, Tamaño_Individuo)




Evaluar_Mitad <- function(Mitad) {
    #Se inicia en 0 la cuenta de puntuacion, y la de 1s y 0s   
    Cuenta <- 0
    Cuenta_1s <- 0
    Cuenta_0s <- 0

  #Si se detecta 1, se suma 1 🚫
    for (i in 1:length(Mitad)) {
      bit <- Mitad[i]
      
      if (bit == "1") {
        Cuenta <- Cuenta + 1
        Cuenta_1s <- Cuenta_1s + 1
      }
  #Si se detecta 0 se resta 1 🚫
    if (bit == "0") {
      Cuenta <- Cuenta - 1
      Cuenta_0s <- Cuenta_0s + 1
    }
    
    # Si no estamos en el primer caracter
    # Ya podemos comparar con el anterior
    if (i > 1 && Mitad[i - 1] == bit) {
  # Si hay doble "1", se suma 1🚫
      if (bit == "1") {
        Cuenta <- Cuenta + 1
      }
  #Si hay doble "0", se resta 1🚫
      if (bit == "0") {
        Cuenta <- Cuenta - 1
      }
    }
    }


  #Y solo hasta que acabemos de contar a la mitad
  #Y no en cada nuevo bit contado...
  
  #Si hay más 1s que 0s, se suma 1🚫
    if (Cuenta_1s > Cuenta_0s) {
        Cuenta <- Cuenta + 1
  #Si hay más 0s que 1s, se resta 1🚫
    } else if (Cuenta_0s > Cuenta_1s) {
    Cuenta <- Cuenta - 1
    }
  
  return(Cuenta)
}

# Función para evaluar un individuo completo
Evaluar_Individuo <- function(individual) {
  # Convertir el string binario a un vector de enteros
  Vector_Binario <- as.integer(strsplit(individual, "")[[1]])
  
  # Separar en dos mitades--------------------------------------------------
  # La primer mitad es desde el caracter 1, hasta la mitad de la longitud del vector entero
  PrimerMitad <- Vector_Binario[1:(length(Vector_Binario) / 2)]
  # Las egunda mitad es desde el caracter [Mitad del vetor], hasta la longitud completa (El final)
  SegundaMitad <- Vector_Binario[(length(Vector_Binario) / 2 + 1):length(Vector_Binario)]
  
  #califica las dos mitades mitades-------------------------------------------
  Calificacion_PrimerMitad <- Evaluar_Mitad(PrimerMitad)
   # print(paste("La primer mitad está calificada como:  ", Calificacion_PrimerMitad))
  Calificacion_SegundaMitad <- Evaluar_Mitad(SegundaMitad)
   # print(paste("La segunda mitad está calificada como:  ", Calificacion_SegundaMitad))
 # print("   -   -   -   -   -   -   -   -   -   -   -")
  
  #Obtiene la calificación del individuo entero --------------------------------
  PuntuacionTotal <- Calificacion_PrimerMitad + Calificacion_SegundaMitad #Sumando ambas mitades
  return(PuntuacionTotal)
}

# Evaluar toda la población
Evaluar_Poblacion <- function(Poblacion) {
  Putuaciones <- numeric(length(Poblacion))
  for (i in 1:length(Poblacion)) {
    Putuaciones[i] <- Evaluar_Individuo(Poblacion[i])
  }
  print(Poblacion_Inicial)
  print(Putuaciones)
  return(Putuaciones)
}

# Calcular la puntuación total de la población
Calcular_PuntuacionTotal <- function(Putuaciones) {
  PuntuacionTotal <- sum(Putuaciones)
  return(PuntuacionTotal)
}

# Probar la evaluación de la población inicial
Putuaciones <- Evaluar_Poblacion(Poblacion_Inicial)
PuntuacionTotal <- Calcular_PuntuacionTotal(Putuaciones)
print(PuntuacionTotal)

# ===============================================================================
#= ====================== Aquí se cruzan los individuos =========================
# ===============================================================================
#
# Función para seleccionar los mejores individuos
Elegir_MejoresIndividuos <- function(Poblacion, Putuaciones, MejorIndividuo_Indice) {
  Individuos_Ordenados <- order(Putuaciones, decreasing = TRUE)
  MejoresIndividuos <- Poblacion[Individuos_Ordenados[1:MejorIndividuo_Indice]]
  
  # Imprimir los mejores individuos seleccionados
#   print("Mejores individuos seleccionados:")
#   print(MejoresIndividuos)
  
  return(MejoresIndividuos)
}

# Función para cruzar dos individuos
Cruzar_Poblacion <- function(ind1, ind2) {
  midpoint <- nchar(ind1) / 2
  child1 <- paste0(substr(ind1, 1, midpoint), substr(ind2, midpoint + 1, nchar(ind2)))
  child2 <- paste0(substr(ind2, 1, midpoint), substr(ind1, midpoint + 1, nchar(ind1)))
  
  # Imprimir los individuos y sus hijos después del cruce
    #   print(paste("Cruzando:", ind1, "y", ind2))
    #   print(paste("Resulta en hijos:", child1, "y", child2))
  
  return(c(child1, child2))
}

# Generar nueva población mediante cruces
Generar_Nueva_Poblacion <- function(Poblacion, Putuaciones, Tamaño_Poblacion) {
  MejoresIndividuos <- Elegir_MejoresIndividuos(Poblacion, Putuaciones, Tamaño_Poblacion)
  Nueva_Poblacion <- character() #Crear un nuevo vector pero vacío
  
  for (i in seq(1, length(MejoresIndividuos))) {
    for (j in seq(i + 1, length(MejoresIndividuos))) {
      if (length(Nueva_Poblacion) < Tamaño_Poblacion) {
        children <- Cruzar_Poblacion(MejoresIndividuos[i], MejoresIndividuos[j])
        Nueva_Poblacion <- c(Nueva_Poblacion, children[1])
        
        if (length(Nueva_Poblacion) < Tamaño_Poblacion) {
          Nueva_Poblacion <- c(Nueva_Poblacion, children[2])
        } else {
          break
        }
      }
    }
    if (length(Nueva_Poblacion) >= Tamaño_Poblacion) {
      break
    }
  }
  
  # Imprimir la nueva población generada
    #   print("Nueva población generada:")
    #   print(Nueva_Poblacion)
  
  return(Nueva_Poblacion)
}

Nueva_Poblacion <- Generar_Nueva_Poblacion(Poblacion_Inicial, Putuaciones, length(Poblacion_Inicial))



# ===============================================================================
# =<======================== Aquí se hace la mutación ============================
# ===============================================================================


# Función para invertir un bit en una posición específica

Mutar_Bit <- function(individual, position) {
  bits <- unlist(strsplit(individual, ""))
  # Ajustar la posición utilizando el operador módulo
  position <- ((position - 1) %% length(bits)) + 1
  # Invertir el bit en la posición especificada
  if (bits[position] == "0") {
    bits[position] <- "1"
  } else {
    bits[position] <- "0"
  }
  # Unir los bits de nuevo en una cadena binaria
  Mutar_Individual <- paste(bits, collapse = "")
  return(Mutar_Individual)
}

# Función para mutar la población
Mutar_Poblacion <- function(Poblacion) {
  for (i in 1:length(Poblacion)) {
    Poblacion[i] <- Mutar_Bit(Poblacion[i], i)
    # Imprimir el individuo después de la mutación
    # print(paste("Individuo después de la mutación en posición", i, ":", Poblacion[i]))
  }
  return(Poblacion)
}

# Aplicar mutación a la nueva población
Poblacion_Mutada <- Mutar_Poblacion(Nueva_Poblacion)




# ===============================================================================
# ======================== Algoritmo Genético Completo =========================
# ===============================================================================

# Aquí toca repetir todo el rollo hasta que ya no haya mejoras significativas en la
# Calificación de la población.
# Que emocionante xd
Hacer_Todo <- function(Tamaño_Poblacion, Tamaño_Individuo, Limite_Iteraciones, Limite_Iteraciones_NoMejora) {
  Tamaño_Poblacion <- 7
  Poblacion <- Generar_Poblacion(Tamaño_Poblacion, Tamaño_Individuo)
  Mejores_Calificaciones <- c()
  Cuenta_NoMejora <- 0
  Iteracion <- 1
  
  repeat {
    Putuaciones <- Evaluar_Poblacion(Poblacion)
    PuntuacionTotal <- Calcular_PuntuacionTotal(Putuaciones)
    Mejores_Calificaciones <- c(Mejores_Calificaciones, PuntuacionTotal)
    
    cat("Iteración:", Iteracion, "Puntuación total:", PuntuacionTotal, "\n")
    
    if (length(Mejores_Calificaciones) > 1 && Mejores_Calificaciones[length(Mejores_Calificaciones)] == Mejores_Calificaciones[length(Mejores_Calificaciones) - 1]) {
      Cuenta_NoMejora <- Cuenta_NoMejora + 1
    } else {
      Cuenta_NoMejora <- 0
    }
    
    if (Cuenta_NoMejora >= Limite_Iteraciones_NoMejora || Iteracion >= Limite_Iteraciones) {
      break
    }
    
    Nueva_Poblacion <- Generar_Nueva_Poblacion(Poblacion, Putuaciones, Tamaño_Poblacion)
    Poblacion <- Mutar_Poblacion(Nueva_Poblacion)
    print(" -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -")
    cat("\nPoblación de la iteración ", Iteracion + 1, ": ", Poblacion)
    Iteracion <- Iteracion + 1
  }
  
  return(Poblacion)
}


# Parámetros del algoritmo
Tamaño_Poblacion <- Tamaño_Poblacion
Tamaño_Individuo <- Tamaño_Individuo
Limite_Iteraciones <- 2
Limite_Iteraciones_NoMejora <- 100

# Ejecutar el algoritmo genético
Poblacion_Final <- Hacer_Todo(Tamaño_Poblacion, Tamaño_Individuo, Limite_Iteraciones, Limite_Iteraciones_NoMejora)

# Imprimir la población final✨🎉

print(" = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =")
print(paste("Población final: ", Poblacion_Final))
